/* Brolog version 1.1.18 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
        typeof define === 'function' && define.amd ? define(['exports'], factory) :
            (factory((global.window = global.window || {})));
}(this, (function (exports) {
    'use strict';
    /*!
     * Brolog JavaScript Library v1.1.0
     * https://github.com/zixia/brolog
     *
     * Copyright Huan LI <zixia@zixia.net>
     * Released under the ISC license
     * https://github.com/zixia/brolog/blob/master/LICENSE
     *
     * Date: 2016-07
     */
    var LogLevel;
    (function (LogLevel) {
        LogLevel[LogLevel["silent"] = 0] = "silent";
        LogLevel[LogLevel["error"] = 1] = "error";
        LogLevel[LogLevel["warn"] = 2] = "warn";
        LogLevel[LogLevel["info"] = 3] = "info";
        LogLevel[LogLevel["verbose"] = 4] = "verbose";
        LogLevel[LogLevel["silly"] = 5] = "silly";
    })(LogLevel || (LogLevel = {}));
    var nullLogger = {
        error: function () { },
        warn: function () { },
        info: function () { },
        verbose: function () { },
        silly: function () { },
    };
    var Brolog = (function () {
        function Brolog() {
            this.logLevel = LogLevel.info;
            this.prefixFilter = /.*/; // Match all by default
            var instance = Brolog.instance();
            if (instance) {
                // set level/prefix of this instance
                // default to the global instance
                this.level(instance.level());
                this.prefix(instance.prefix());
            }
        }
        /**
         * Create a global Brolog Instance for sharing between modules
         */
        Brolog.instance = function (levelName, prefix) {
            if (levelName) {
                Brolog.level(levelName);
            }
            if (prefix) {
                Brolog.prefix(prefix);
            }
            return globalBrolog;
        };
        Brolog.enableLogging = function (log) {
            Brolog.instance().verbose('Brolog', 'enableLogging(%s)', log);
            if (log === false) {
                Brolog.instance().silly('Brolog', 'enableLogging() disabled');
                return nullLogger;
            }
            else if (log === true) {
                Brolog.instance().silly('Brolog', 'enableLogging() enabled: using blobal Brolog instance');
                return Brolog.instance();
            }
            else if (typeof log.verbose === 'function') {
                Brolog.instance().silly('Brolog', 'enableLogging() enabled: using provided logger');
                return log;
            }
            throw new Error('got invalid logger');
        };
        Brolog.prefix = function (filter) {
            return Brolog.instance().prefix(filter);
        };
        Brolog.prototype.prefix = function (filter) {
            if (filter) {
                if (typeof filter === 'string') {
                    this.prefixFilter = new RegExp(filter, 'i');
                }
                else if (filter instanceof RegExp) {
                    this.prefixFilter = filter;
                }
                else {
                    throw new Error('unsupported prefix filter');
                }
            }
            return this.prefixFilter;
        };
        Brolog.level = function (levelName) {
            return Brolog.instance().level(levelName);
        };
        Brolog.prototype.level = function (levelName) {
            if (levelName) {
                // console.log('levelName: ' + levelName)
                // http://stackoverflow.com/a/21294925/1123955
                // XXX: fix the any here?
                var logLevel = LogLevel[levelName.toLowerCase()];
                if (logLevel === undefined) {
                    // console.log(logLevel)
                    // console.log(LogLevel)
                    throw new Error('level name error');
                }
                this.logLevel = logLevel;
            }
            return LogLevel[this.logLevel];
        };
        // private log(levelTitle: LevelTitle, prefix: string, message: string) { return Brolog.log(levelTitle, prefix, message) }
        Brolog.prototype.log = function (levelTitle, prefix, message) {
            if (!this.prefixFilter.test(prefix)) {
                return; // skip message not match prefix filter
            }
            var args = Array.prototype.slice.call(arguments, 3) || [];
            args.unshift(Brolog.timestamp() + ' ' + levelTitle + ' ' + prefix + ' ' + (message || ''));
            switch (levelTitle) {
                case 'ERR':
                    console.error.apply(console, args);
                    break;
                case 'WARN':
                    console.warn.apply(console, args);
                    break;
                case 'INFO':
                    console.info.apply(console, args);
                    break;
                default:
                case 'VERB':
                case 'SILL':
                    console.log.apply(console, args);
            }
        };
        Brolog.error = function (prefix) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var instance = Brolog.instance();
            return instance.error.apply(instance, arguments);
        };
        Brolog.prototype.error = function (prefix) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            if (this.logLevel < LogLevel.error) {
                return;
            }
            var argList = Array.prototype.slice.call(arguments);
            argList.unshift('ERR');
            this.log.apply(this, argList);
        };
        Brolog.warn = function (prefix) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var instance = Brolog.instance();
            return instance.warn.apply(instance, arguments);
        };
        Brolog.prototype.warn = function (prefix) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            if (this.logLevel < LogLevel.warn) {
                return;
            }
            var argList = Array.prototype.slice.call(arguments);
            argList.unshift('WARN');
            this.log.apply(this, argList);
        };
        Brolog.info = function (prefix) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var instance = Brolog.instance();
            return instance.info.apply(instance, arguments);
        };
        Brolog.prototype.info = function (prefix) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            if (this.logLevel < LogLevel.info) {
                return;
            }
            var argList = Array.prototype.slice.call(arguments);
            argList.unshift('INFO');
            this.log.apply(this, argList);
        };
        Brolog.verbose = function (prefix) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var instance = Brolog.instance();
            return instance.verbose.apply(instance, arguments);
        };
        Brolog.prototype.verbose = function (prefix) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            if (this.logLevel < LogLevel.verbose) {
                return;
            }
            var argList = Array.prototype.slice.call(arguments);
            argList.unshift('VERB');
            this.log.apply(this, argList);
        };
        Brolog.silly = function (prefix) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var instance = Brolog.instance();
            return instance.silly.apply(instance, arguments);
        };
        Brolog.prototype.silly = function (prefix) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            if (this.logLevel < LogLevel.silly) {
                return;
            }
            var argList = Array.prototype.slice.call(arguments);
            argList.unshift('SILL');
            this.log.apply(this, argList);
        };
        Brolog.timestamp = function () {
            var date = new Date();
            var hour = date.getHours();
            var min = date.getMinutes();
            var sec = date.getSeconds();
            var stampStr = '';
            stampStr += (hour < 10) ? ('0' + hour) : hour;
            stampStr += ':';
            stampStr += (min < 10) ? ('0' + min) : min;
            stampStr += ':';
            stampStr += (sec < 10) ? ('0' + sec) : sec;
            return stampStr;
        };
        return Brolog;
    }());
    var globalBrolog = new Brolog();
    exports.nullLogger = nullLogger;
    exports.Brolog = Brolog;
    exports.globalBrolog = globalBrolog;
    exports.log = globalBrolog;
    exports['default'] = globalBrolog;
    Object.defineProperty(exports, '__esModule', { value: true });
})));
/* https://git.io/zixia/ */
//# sourceMappingURL=brolog.es6.umd.js.map
