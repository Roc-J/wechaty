/* Brolog version 1.1.18 */
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.window = global.window || {})));
}(this, (function (exports) { 'use strict';

/*!
 * Brolog JavaScript Library v1.1.0
 * https://github.com/zixia/brolog
 *
 * Copyright Huan LI <zixia@zixia.net>
 * Released under the ISC license
 * https://github.com/zixia/brolog/blob/master/LICENSE
 *
 * Date: 2016-07
 */
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["silent"] = 0] = "silent";
    LogLevel[LogLevel["error"] = 1] = "error";
    LogLevel[LogLevel["warn"] = 2] = "warn";
    LogLevel[LogLevel["info"] = 3] = "info";
    LogLevel[LogLevel["verbose"] = 4] = "verbose";
    LogLevel[LogLevel["silly"] = 5] = "silly";
})(LogLevel || (LogLevel = {}));
const nullLogger = {
    error() { },
    warn() { },
    info() { },
    verbose() { },
    silly() { },
};
class Brolog {
    constructor() {
        this.logLevel = LogLevel.info;
        this.prefixFilter = /.*/; // Match all by default
        const instance = Brolog.instance();
        if (instance) {
            // set level/prefix of this instance
            // default to the global instance
            this.level(instance.level());
            this.prefix(instance.prefix());
        }
    }
    /**
     * Create a global Brolog Instance for sharing between modules
     */
    static instance(levelName, prefix) {
        if (levelName) {
            Brolog.level(levelName);
        }
        if (prefix) {
            Brolog.prefix(prefix);
        }
        return globalBrolog;
    }
    static enableLogging(log) {
        Brolog.instance().verbose('Brolog', 'enableLogging(%s)', log);
        if (log === false) {
            Brolog.instance().silly('Brolog', 'enableLogging() disabled');
            return nullLogger;
        }
        else if (log === true) {
            Brolog.instance().silly('Brolog', 'enableLogging() enabled: using blobal Brolog instance');
            return Brolog.instance();
        }
        else if (typeof log.verbose === 'function') {
            Brolog.instance().silly('Brolog', 'enableLogging() enabled: using provided logger');
            return log;
        }
        throw new Error('got invalid logger');
    }
    static prefix(filter) {
        return Brolog.instance().prefix(filter);
    }
    prefix(filter) {
        if (filter) {
            if (typeof filter === 'string') {
                this.prefixFilter = new RegExp(filter, 'i');
            }
            else if (filter instanceof RegExp) {
                this.prefixFilter = filter;
            }
            else {
                throw new Error('unsupported prefix filter');
            }
        }
        return this.prefixFilter;
    }
    static level(levelName) {
        return Brolog.instance().level(levelName);
    }
    level(levelName) {
        if (levelName) {
            // console.log('levelName: ' + levelName)
            // http://stackoverflow.com/a/21294925/1123955
            // XXX: fix the any here?
            const logLevel = LogLevel[levelName.toLowerCase()];
            if (logLevel === undefined) {
                // console.log(logLevel)
                // console.log(LogLevel)
                throw new Error('level name error');
            }
            this.logLevel = logLevel;
        }
        return LogLevel[this.logLevel];
    }
    // private log(levelTitle: LevelTitle, prefix: string, message: string) { return Brolog.log(levelTitle, prefix, message) }
    log(levelTitle, prefix, message) {
        if (!this.prefixFilter.test(prefix)) {
            return; // skip message not match prefix filter
        }
        const args = Array.prototype.slice.call(arguments, 3) || [];
        args.unshift(Brolog.timestamp() + ' ' + levelTitle + ' ' + prefix + ' ' + (message || ''));
        switch (levelTitle) {
            case 'ERR':
                console.error.apply(console, args);
                break;
            case 'WARN':
                console.warn.apply(console, args);
                break;
            case 'INFO':
                console.info.apply(console, args);
                break;
            default:
            case 'VERB':
            case 'SILL':
                console.log.apply(console, args);
        }
    }
    static error(prefix, ...args) {
        const instance = Brolog.instance();
        return instance.error.apply(instance, arguments);
    }
    error(prefix, ...args) {
        if (this.logLevel < LogLevel.error) {
            return;
        }
        const argList = Array.prototype.slice.call(arguments);
        argList.unshift('ERR');
        this.log.apply(this, argList);
    }
    static warn(prefix, ...args) {
        const instance = Brolog.instance();
        return instance.warn.apply(instance, arguments);
    }
    warn(prefix, ...args) {
        if (this.logLevel < LogLevel.warn) {
            return;
        }
        const argList = Array.prototype.slice.call(arguments);
        argList.unshift('WARN');
        this.log.apply(this, argList);
    }
    static info(prefix, ...args) {
        const instance = Brolog.instance();
        return instance.info.apply(instance, arguments);
    }
    info(prefix, ...args) {
        if (this.logLevel < LogLevel.info) {
            return;
        }
        const argList = Array.prototype.slice.call(arguments);
        argList.unshift('INFO');
        this.log.apply(this, argList);
    }
    static verbose(prefix, ...args) {
        const instance = Brolog.instance();
        return instance.verbose.apply(instance, arguments);
    }
    verbose(prefix, ...args) {
        if (this.logLevel < LogLevel.verbose) {
            return;
        }
        const argList = Array.prototype.slice.call(arguments);
        argList.unshift('VERB');
        this.log.apply(this, argList);
    }
    static silly(prefix, ...args) {
        const instance = Brolog.instance();
        return instance.silly.apply(instance, arguments);
    }
    silly(prefix, ...args) {
        if (this.logLevel < LogLevel.silly) {
            return;
        }
        const argList = Array.prototype.slice.call(arguments);
        argList.unshift('SILL');
        this.log.apply(this, argList);
    }
    static timestamp() {
        const date = new Date();
        const hour = date.getHours();
        const min = date.getMinutes();
        const sec = date.getSeconds();
        let stampStr = '';
        stampStr += (hour < 10) ? ('0' + hour) : hour;
        stampStr += ':';
        stampStr += (min < 10) ? ('0' + min) : min;
        stampStr += ':';
        stampStr += (sec < 10) ? ('0' + sec) : sec;
        return stampStr;
    }
}
const globalBrolog = new Brolog();

exports.nullLogger = nullLogger;
exports.Brolog = Brolog;
exports.globalBrolog = globalBrolog;
exports.log = globalBrolog;
exports['default'] = globalBrolog;

Object.defineProperty(exports, '__esModule', { value: true });

})));
/* https://git.io/zixia/ */
//# sourceMappingURL=brolog.es6.umd.js.map
